// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package objectlistoperations.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

/**
 * This java action returns an object by its position in Provided list.
 * 
 * Index with value "0" will return first object in the list.
 * Index with value "1" will return second object in the list, etc.
 * Index with value "-1" will return last object in the list.
 * Index with value "-2" will return object before the last object in the list, etc.
 * Returns empty object if the list is empty
 * Returns empty object if index surpasses size of the list
 */
public class JA_List_GetObjectByIndex extends CustomJavaAction<IMendixObject>
{
	private java.util.List<IMendixObject> ProvidedList;
	private java.lang.Long ObjectIndex;

	public JA_List_GetObjectByIndex(IContext context, java.util.List<IMendixObject> ProvidedList, java.lang.Long ObjectIndex)
	{
		super(context);
		this.ProvidedList = ProvidedList;
		this.ObjectIndex = ObjectIndex;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE

		if (ObjectIndex == null) {
		    throw new IllegalArgumentException("ObjectIndex parameter should be a valid integer indicating a position of object within the ProvidedList.");
		}

		if (ProvidedList == null || ProvidedList.isEmpty()) {
		    return null;
		}

		int index = ObjectIndex.intValue();
		int listSize = ProvidedList.size();

		// If the index is positive and within the list size, return the object at that index.
		// If the index is negative, it refers to the position from the end of the list.
		// Returns null if the absolute value of the index is out of bounds.
		if (index >= 0 && index < listSize) {
		    return ProvidedList.get(index);
		} else if (index < 0 && Math.abs(index) <= listSize) {
		    return ProvidedList.get(listSize + index);
		}

		return null;
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_List_GetObjectByIndex";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
