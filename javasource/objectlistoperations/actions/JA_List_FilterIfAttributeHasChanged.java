// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package objectlistoperations.actions;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import com.mendix.webui.CustomJavaAction;
import objectlistoperations.impl.Misc;

/**
 * This Java action filters provided list by attributes that were changed and those attributes were specified in "Changed Members To Filter By" parameter. 
 * Commits it if requested through "Commit" parameter.
 * Returns a new filtered list.
 */
public class JA_List_FilterIfAttributeHasChanged extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.util.List<IMendixObject> ProvidedList;
	private java.lang.String ChangedMembersToFilterBy;
	private java.lang.Boolean Commit;

	public JA_List_FilterIfAttributeHasChanged(IContext context, java.util.List<IMendixObject> ProvidedList, java.lang.String ChangedMembersToFilterBy, java.lang.Boolean Commit)
	{
		super(context);
		this.ProvidedList = ProvidedList;
		this.ChangedMembersToFilterBy = ChangedMembersToFilterBy;
		this.Commit = Commit;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		if (ProvidedList == null || ProvidedList.isEmpty()) {
			// We return empty list in case if empty list was provided on TopLevel
			return new ArrayList<IMendixObject>();
		}

		// Begin Error handling and members splitting
		String[] membersSplitted = null;
		if (!Misc.isStringNotEmpty(ChangedMembersToFilterBy)) {
			throw new IllegalArgumentException("'Changed members to filter' parameter should not be empty");
		}
		membersSplitted = ChangedMembersToFilterBy.split(",");
		for (String memberName : membersSplitted) {
			String trimmedMemberName = memberName.trim();
		    if (!ProvidedList.get(0).hasMember(trimmedMemberName)) {
		    	throw new IllegalArgumentException("Unknown member: " + trimmedMemberName);
		    }
		}
		// End Error handling
		
		java.util.List<IMendixObject> resultList = this.ProvidedList
				.stream()
				.filter(filterByMemberChange(getContext(), membersSplitted))
		        .collect(Collectors.toList());

		// Commit filtered objects if "Commit" is set to true
		if (Commit) {
			Core.commit(getContext(), resultList);
		}
		
		return resultList;
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_List_FilterIfAttributeHasChanged";
	}

	// BEGIN EXTRA CODE
	/**
	 * Filters a list of IMendixObjects by whether an object has changed members. Members are taken from a list of member names.
	 *
	 * @param context         The context of the current session.
	 * @param membersSplitted An array of member names to be used for filtering.
	 * @return A Predicate that filters IMendixObjects based on the specified criteria.
	 */
	private static Predicate<IMendixObject> filterByMemberChange(IContext context, String[] membersSplitted) {
	    return obj -> Arrays.stream(membersSplitted)
	                        .map(String::trim)
	                        .map(memberName -> obj.getMember(context, memberName).getState())
	                        .anyMatch(state -> state == IMendixObjectMember.MemberState.CHANGED);
	}
	// END EXTRA CODE
}
