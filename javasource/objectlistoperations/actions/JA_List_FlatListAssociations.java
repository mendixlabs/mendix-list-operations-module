// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package objectlistoperations.actions;

import java.util.ArrayList;
import java.util.stream.Collectors;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaAssociation;
import com.mendix.webui.CustomJavaAction;
import objectlistoperations.impl.Misc;

/**
 * 1. Get a list of objects Provided list).
 * 2. Iterates through "Provided list".
 * 3. Retrieves all lists of associated objects using provided "Association name".
 * 4. Append every associated object to a new list.
 * 5. Returns generated list.
 * 
 * Returns empty list of associated entity if provided list was empty
 */
public class JA_List_FlatListAssociations extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.util.List<IMendixObject> ProvidedList;
	private java.lang.String ReturnedAssociatedEntity;
	private java.lang.String AssociationName;

	public JA_List_FlatListAssociations(IContext context, java.util.List<IMendixObject> ProvidedList, java.lang.String ReturnedAssociatedEntity, java.lang.String AssociationName)
	{
		super(context);
		this.ProvidedList = ProvidedList;
		this.ReturnedAssociatedEntity = ReturnedAssociatedEntity;
		this.AssociationName = AssociationName;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		IContext context = getContext();
		
		// Begin Error handling
		if (!Misc.isStringNotEmpty(AssociationName)) {
	        throw new IllegalArgumentException("\"Association name\" parameter is required");
	    }
		IMetaAssociation metaAssociation = Core.getMetaAssociation(AssociationName);
		if (metaAssociation == null) {
	        throw new IllegalArgumentException("Incorrect association name. Please check \"Association name\" parameter");
	    }
		if (!metaAssociation.getParent().getName().equals(ReturnedAssociatedEntity) && !metaAssociation.getChild().getName().equals(ReturnedAssociatedEntity)) {
	        throw new IllegalArgumentException(String.format("There is no entity '%s' linked by '%s' association", ReturnedAssociatedEntity, AssociationName));
	    }
		// End Error handling
		
		if (ProvidedList == null || ProvidedList.isEmpty()) {
			// We return empty list in case if empty list was provided on TopLevel
			return new ArrayList<IMendixObject>();
		}

		return ProvidedList
				.stream()
				.flatMap(obj -> Core.retrieveByPath(context, obj, AssociationName).stream())
				.distinct()
				.collect(Collectors.toList());
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_List_FlatListAssociations";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
