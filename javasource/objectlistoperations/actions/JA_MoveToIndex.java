// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package objectlistoperations.actions;

import java.util.Comparator;
import java.util.List;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import objectlistoperations.impl.Sorting_V1;
import objectlistoperations.impl.SortingValidation_V1;
import objectlistoperations.impl.SortingValidation_V1.ValidationFeedback;

/**
 * This Java action takes an object and a list (which the object is also part of) and changes that object's position in the list to the specified index of the list, based on a specific 'sorting' attribute being used to sort the list.
 * 
 * Deprecated. Please use JA_List_MoveObjectToIndex instead
 */
public class JA_MoveToIndex extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject ObjectToChange;
	private java.util.List<IMendixObject> AffectedList;
	private java.lang.String SortAttributeName;
	private java.lang.Long NewIndex;
	private java.lang.Boolean Commit;

	public JA_MoveToIndex(IContext context, IMendixObject ObjectToChange, java.util.List<IMendixObject> AffectedList, java.lang.String SortAttributeName, java.lang.Long NewIndex, java.lang.Boolean Commit)
	{
		super(context);
		this.ObjectToChange = ObjectToChange;
		this.AffectedList = AffectedList;
		this.SortAttributeName = SortAttributeName;
		this.NewIndex = NewIndex;
		this.Commit = Commit;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		// Set variables
		IContext context = this.getContext();
		IMendixObject ObjectToChange = this.ObjectToChange;
		List<IMendixObject> AffectedList = this.AffectedList;
		String SortAttributeName = this.SortAttributeName;
		Boolean Commit = this.Commit;
		Long NewIndexLong = this.NewIndex;
		if(NewIndexLong == null) {
			throw new Exception("No index has been provided");
		}
		Integer NewIndex = NewIndexLong.intValue();

		//Sort the list
		//Define Comparator
		Comparator<IMendixObject> compareBySortOrder = new Comparator<IMendixObject>() {
			@SuppressWarnings("unchecked")
			@Override
			public int compare(IMendixObject o1, IMendixObject o2) {
			   	if(o1.getValue(context, SortAttributeName) == null || o2.getValue(context, SortAttributeName) == null) {
			   			return 0;
			    }else {
				   	return ((Comparable<Integer>) o1.getValue(context, SortAttributeName)).compareTo(o2.getValue(context, SortAttributeName));
				   	}
				}
			};
		//Perform sorting using Comparator
		AffectedList.sort(compareBySortOrder);
		//Immediately perform this sort in case the list was not provided in the same order as this sort order would provide
				
		ValidationFeedback Valid = SortingValidation_V1.performIndexValidation(AffectedList, ObjectToChange, context, SortAttributeName, NewIndex, Commit);
		
		if(Valid.Valid == true) {
			Sorting_V1.moveToIndex(AffectedList, ObjectToChange, context, SortAttributeName, NewIndex, Commit);		
		}else{
			throw new Exception(Valid.ValidationMessage);
		}
		
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_MoveToIndex";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
