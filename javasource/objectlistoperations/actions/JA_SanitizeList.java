// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package objectlistoperations.actions;

import java.util.List;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import objectlistoperations.impl.Sorting;
import objectlistoperations.impl.SortingValidation;
import objectlistoperations.impl.SortingValidation.ValidationFeedback;

/**
 * This java action takes a list of objects and 'santizes' their data for sorting. All logic is applied to the input attribute. which should be used to determine the sorting order.
 * The objects are ordered based on any exisiting values (nulls are placed at the end of the list). Then, the value of SortOrderAttribute is set to 1 for the first object, 2 for the second, etc..
 * The result is a clean set of values for the list, meaning they are now in a format which can be used by the other sorting actions.
 */
public class JA_SanitizeList extends CustomJavaAction<java.lang.Void>
{
	private java.util.List<IMendixObject> ListToSanitize;
	private java.lang.String SortAttributeName;
	private java.lang.Boolean Commit;

	public JA_SanitizeList(IContext context, java.util.List<IMendixObject> ListToSanitize, java.lang.String SortAttributeName, java.lang.Boolean Commit)
	{
		super(context);
		this.ListToSanitize = ListToSanitize;
		this.SortAttributeName = SortAttributeName;
		this.Commit = Commit;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		// Set variables
		IContext context = this.getContext();
		List<IMendixObject> ListToSanitize = this.ListToSanitize;
		String SortAttributeName = this.SortAttributeName;
		Boolean Commit = this.Commit;
		
		ValidationFeedback Valid = SortingValidation.performSanitizingValidation(ListToSanitize, context, SortAttributeName, Commit);
		
		
		if(Valid.Valid == true) {
		Sorting.listSanitize(ListToSanitize, context, SortAttributeName, Commit);
		
		}else{
			throw new Exception(Valid.ValidationMessage);
		}
		
		return null;
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_SanitizeList";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
